'''
GREEDYMOTIFSEARCH(Dna, k, t)
    BestMotifs <- motif matrix formed by first k-mers in each string
                  from Dna
    for each k-mer Motif in the first string from Dna
        Motif1 <- Motif
        for i = 2 to t
            form Profile from motifs Motif1, ..., Motifi - 1
            Motifi <- Profile-most probable k-mer in the i-th string
                      in Dna
        Motifs <- (Motif1, ..., Motift)
        if Score(Motifs) < Score(BestMotifs)
            BestMotifs <- Motifs
    output BestMotifs
'''

CODE = {'A':0,'C':1,'G':2,'T':3}
CODE_R = {0:'A', 1:'C', 2:'G', 3:'T'}

def code_to_dna(value, k):
    #Convert number to text
    code_r = {0:'A', 1:'C', 2:'G', 3:'T'}
    seq_r = ''
    
    while len(seq_r) < k:
        seq_r =  code_r[value % 4] + seq_r
        value  = value // 4
    return seq_r

def calculate_prob_matrix(motifs, k, t_temp):
    '''
    Profile   A:  .2  .2   0   0   0   0  .9  .1  .1  .1  .3   0            
              C:  .1  .6   0   0   0   0   0  .4  .1  .2  .4  .6  
              G:   0   0   1   1  .9  .9  .1   0   0   0   0   0  
              T:  .7  .2   0   0  .1  .1   0  .5  .8  .7  .3  .4  
    '''
    matrix = [[1.0 / (t_temp + 4)] * k, [1.0 / (t_temp + 4)] * k, [1.0 / (t_temp + 4)] * k, [1.0 / (t_temp + 4)] * k] 
    for i in range(k):
        for j in range(t_temp):
            matrix[CODE[motifs[j][i]]][i] += 1.0/ (t_temp + 4)
#    print matrix
    return matrix
            
def profile_most_probable_kmer(matrix, string, k):
    '''
    According to current profile, identify the most possible kmer in one DNA string
    '''
    pmax = 0
    candidate = string[0: k]
    for i in range(len(string) - k + 1):
        p = 1
        for j in range(k):
            p *= matrix[CODE[string[i + j]]][j]
        if p > pmax:
            pmax = p
            candidate = string[i: i + k]
    return candidate

def calculate_score(motifs, k, t):
    matrix = calculate_prob_matrix(motifs, k, t)
    median_motif = ''
    score = 0
    
    for i in range(k):
        prob = [matrix[_][i] for _ in range(4)]
        median_motif += CODE_R[prob.index(max(prob))]
    
    for i in range(t):
        for j in range(k):
            if median_motif[j] != motifs[i][j]:
                score += 1
    return score
            
def greedy_motif_search(Dna, k, t):
    '''
    Main part
    Set initial kmers/scores
    Move from leftmost to the rightmost of the 1st string to get a kmer with min score
    '''
    # Separate DNA strings
    dna_strings = []
    for line in Dna.splitlines():
#        print line.strip()
        dna_strings.append(line.strip( ))
        
    # Initiate Best Motifs
    best_motifs = [dna_strings[_][0:k] for _ in range(t)]
    score_min = calculate_score(best_motifs, k ,t)
    
    ref_string = dna_strings[0]
    for i in range(len(ref_string) - k + 1):
        motifs = [ref_string[i : i + k]]
#        print motifs
        # Calculate profile matrix according to the first j strings - Dynamic matrix
        for j in range(1, t):
            matrix = calculate_prob_matrix(motifs, k, j)
            motifs.append(profile_most_probable_kmer(matrix, dna_strings[j], k))
        # Calculate final score
        score = calculate_score(motifs, k, t)
        if score < score_min:
            score_min = score
            best_motifs = motifs
    return best_motifs
        
            
Dna = '''GGCGTTCAGGCA
     AAGAATCAGTCA
     CAAGGAGTTCGC
     CACGTCAATCAC
     CAATAATATTCG'''
     
best_motifs = greedy_motif_search(Dna, 3, 5)

Dna = '''ACATGGTCTGCCGCCGTGTCGCTCCGTTCATCCGAAGATCTATGGGGCGATGATTACGTCGCTTTAGAGGTCCGTAGAATCCTACCACCGCCACATATGCGCTATCTTTTCCCACCTAACAAGCCAAAGATGCTAAATGATTGTTCTATTTGTCAT
CACTACTGGTCTTCCGTGCCTACCGAGTGATGAGAACTGGCTTGATACTTGTCCTCACAGCGGGTAGATCGGTTGTCAAGCACGGCTGGCTCCGTAGAACCAGATTTGACATTGTGAGGCCGTATATTCCTAAGGGTTTGACAATTGCTTTGTCCA
CGTAGAGTCCCCTCGCACGTAGTAAATGTTACCGTGTGTGCGAGTCACCTTTTGCAGGACGACCGATCTGTATCGAAACTGAGTAGACTCAGTCATGAGCCTCCGACAGGCAGATCCAGTCGTACGCAGGTAGAGGGTGGCTGCGCCCTACTGAGT
AGCATATTTAGGGTCGGCATGGGTTCGCTGCTGTTGAGCACGGACTGGTCGTATGAGTGTTTAGCTTATCGCGATCGATACCTTGGCTATCTCTCGCGTATACTCCGCATAGTATAAAATGCAACTGCTTGCTGTCCGGAATGTCCAAAGTGACTC
TTCAGCACTCGACGTACAATCCCTGTGGCGACTCTGTTCTGCTATGTTAAGCAAACGCGATGGACATCTCCATCTAACCGCCCGGGGTGCGGCACGCTAGGCTTTAGTGTAGCTAGGTGTCACTCCGATTTGGCGGTATTAGCGCCTCTTCAAAAA
CAGCGCGAAATTTATTGTTAAGATTTCAATCCGTTAAATACCTTGATAATCAAGAGATTGCGGATGCAACATCCCAGGGTCCGTCGTATATTCCGAGTCCCTCTTGGTCGGACTTACTACCGGACAACTCCTGAGGTCTTTGGGATCGTGTGTTTG
CGGTTCGGGTACGTAGATACTCTGGGAGACTTTGCGATTTTGTCGGGTAAAAGGTGTTGCTGGTATCTTCACCGTAGACTCCTGGCGGCGTTTCTGGTGATACCTCGCCGCCGGTTAAACGTGAAATCTCGTTAAGTTGCTACCATCAAGTTGTTA
TCTAGCGAAGATAACGGAGTAGCGAGGAGACAATGTTCCGCTTCAGTGAGCCTCCTGGGCATCTAAGGCTGCCCCGCCGCCACCAAGTCCACATTTGGAGGCGCTCTACCTAGCAGTAAGTAAAATCGACGACGTACACTCCCACAATAAGCCGGC
CAGCGCATCGTGATAATTTTTTTGCAGTGGCGCTAGGAACAAACTGCATTCCGGATCATGCAACCACGGTCCCTGCTAGGGTGTCGTACAGTCCTGGCCCTTTCCTTTCATGGGCATGCGGCCAAGTTAGGGCACCAATGTACGGACTACAAGTAC
CTGTCGCAAGGTCCTACCGGCAGACCAACGCATATTCACTCCGTGATTGGTTGTGTTTGAAGCTGTCACCTATTACTTCAGTGCTGGGCGCTCTCGCATGCGCGAGACCGTAAAGTCCGACCCCTGAATCGATAGCCTGGGGAAATAGTGCGCGCC
GAGAATCGTACGGCCCTGCACGTACTTTTAGTCTATCGTAGACTCCCTTAGCCGGCGGTTTATACGACATTAAAATACACCAGGCGCCGCATACAGTGTCCGTGGATACCGCAAGTATAAACGCGGGCGTTTTACCTGCGGAACGCCTGTCGTCCT
ACCGACCTCTCTAAACCGACGCCGCGATCACACGTCGAATCCTCCATCCCGGTTTTCTCAATATCGGGTGTGAGTACTTGTATCAAATTGCTAACAATCGAGGCAAAACGTATACTCCTAATAGAATTTGTGTGTAGCTGGTTAAGGGACCAGAGA
TATCATTGTATAAAATTGTCGTACCGTAGAATCCTGAAATAACATTCTACCACTCACGCCAGCTTTCAGTAACGCGAACCACGGGCGCCGGGTCTACACGTCCACGATGACTCAGACTACTCGTACTTTATTGTCCAGAAGTGTCTCAGGCCTTTA
GTTACGGGCCTAAATATTGCTAACCGTACAGTCCTATAGAACCATCGACGAGCTTGTAACCTACTGAACGATGTCCGCCCCCGTAAGGAAAACCGATTTTTCGTTGTGGGCATTGTACTATACGTCAGCGAGGTTGCCAGGTACGATCTACGAGCG
TGGGCTGTCATGAGGCCTCGCTTCTTTGCGGAAATCCCTTGGCATCTACACCGAGGAGCAGAGCCATAACTCTCCTTGAGGCACGAACAACCCCCTTGTACATGGTCTTCCCATGAAGGCTTTCAGCGGACACGTACAGTCCTCCCATACGATCTG
TGGATAGTGATTCGTAGATTCCCCTCTCCTACTCAACGCTGAGTGAGCACCCGCTATGTAGTTAACGTATTATGGATATGGCACCACCATGGTGCATCACAAGGTTACTCCATCGTTCCTCGATTAATTAACGGGACTGGGCTCCATCTTCAACGT
CGTAAATTCCCCGCCTAACAGCGTTGTATAAGTACGTTCGACCAGCTTCTCGCCTGGTACCGGCGCGACGTCGCAAAAGGGAGACTGTGTTTACATCTGGACTCGCCAGAGTTGGTCGAAAGAGTTCTGTATGCGGATGGCGCGTACGCTCAGGGC
TCAATCAAATATGTTCAGAGAGACCTTCTGGTGTACTAGCTATACACCTAGGAATGGCACGGTAGGCTTTGATAGGGTCCTTGACGCGACAATGCACTATTTTCGCCACGCACGCGACTTCTGGAAGGTGTGCGTACACTCCGTTTGATACATGTT
CGCAGTGCCGCCCACCTCGCTAGTCTTTGATTTACCCGGGTTCCGTTACTAATCCTTAATTTCTCGCCCCATCGATAGATAGGCCTACGAGCAAGGGGTGGCATTCGCATCCATTCGCAGTCAAAAATTTCCTCGTATGGGATACGTAGACTCCGG
ACAAAGGTGTCAACGTGTGTAGGTCGCCGGTTCCCATAGTCTGTCTAGATGTCCCCTGCCAGTTCGAAGTGTATATCCTTGGAGCGTACACTCCGTCTTCAGACGGGCTGACTTTGCTCACGGGGACGATGGTAATATGACTCCTCAAAGTATCAT
CCTATTGAAAGGATGATGAGGCGACATTCCCGCGAAACTGCAAAAACAAGAAATACGGTCTTTGATACAACCCGTAGATTCCGGCCTCTGTAGGCCCTCCGCATGCGACACAGTAGCAAAAAGGTCGGAGGCGATGGGTCCCACATGCACCCCGTT
GTTCGGGGGACAAGCTCATATGGGACGGACTCGCGGGAGTTAACGGACTATTCGCCAAACATGCTGTTGATCATAAGCCCTTTTTGGGTACCCGACCCTGGAATCCAAAGTAAGCTCGCTCGTAGACTCCTAGTCTAATCTTTGAATGGGTTACTT
GGCAACCTAACTCCAGAACTTTTTTAAGCACACGACTACTACGGCAGTTTTGCATTGTGGCATTACAAGCACAGACTTTATCTGATCTGGTAGGAGCGTTCGGATAGGAACGCTAATATTACTCCCCTCGAAGCATCGTACCTTCGTAAAATCCCC
GTAGTCGGATTCATATCTTAGCTGGACTGCGATGCGATTTTTGTCTAACGCACACAAGACCGTAATATAAAATTAGTTATGCCGCAGCTTGGCTGTCGTATAGTCCCACAAAAGCACTAAAATTAGACGCCGCCCTGGGGACACCGAAGTGCGAGG
CTCGTCACACTAAGACCAGGCAACCATGCTAACGTGCGTAGGAAGGCGCGCACAAGTTAATCTAATCTGTAGATCCTAGACTTCAGGGCGCTCGTCAGTCGGGTGCTGGTGGGTAATATCTCAAATTTACGCCCAGACAATTAACGTAGAGTCCCG'''

     
     
best_motifs = greedy_motif_search(Dna, 12, 25)

output = ''
for motif in best_motifs:
    output = output + motif + '\n'
print output.strip()
    
    